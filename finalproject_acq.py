# -*- coding: utf-8 -*-
"""FinalProject_ACQ.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WpS2fapYFX3OaKxHx4PY2a6G4iZM2J90
"""

!pip install google-search-results

import requests
from serpapi import GoogleSearch
from bs4 import BeautifulSoup
import pandas as pd
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
import math
import cv2

API_KEY = ""
params = {
  "q": "worldometers | population",
  "api_key": ""
}

search = GoogleSearch(params)
results = search.get_dict()
results

res = results["organic_results"]
print(res)

link = results["organic_results"][0]["link"]

result_url = link
print(f"Checking URL: {result_url}")

response = requests.get(result_url)
if response.status_code == 200:
    print(f"Success! The URL {result_url} responded with status code 200.")
else:
    print(f"Failed! The URL {result_url} responded with status code {response.status_code}.")

response = requests.get(link)
soup = BeautifulSoup(response.text, 'html.parser')
print(soup)

table = soup.find('tbody')
data = []
for tr in table.find_all('tr'):
    row = [td.get_text(strip=True) for td in tr.find_all('td')]
    data.append(row)
data_array = np.array(data)

data_array

data_array = np.array([
    ['2024', '8,118,835,999', '0.91 %', '73,524,552', '30.7', '2.31', '55'],
    ['2023', '8,045,311,447', '0.88 %', '70,206,291', '30.5', '2.31', '54'],
    ['2022', '7,975,105,156', '0.83 %', '65,810,005', '30.2', '2.31', '54'],
    ['2021', '7,909,295,151', '0.87 %', '68,342,271', '30.0', '2.32', '53'],
    ['2020', '7,840,952,880', '0.98 %', '76,001,848', '29.7', '2.35', '53'],
    ['2015', '7,426,597,537', '1.23 %', '88,198,886', '28', '2.52', '50'],
    ['2010', '6,985,603,105', '1.27 %', '85,485,397', '27', '2.59', '47'],
    ['2005', '6,558,176,119', '1.30 %', '81,855,429', '26', '2.62', '44'],
    ['2000', '6,148,898,975', '1.37 %', '81,135,904', '25', '2.73', '41'],
    ['1995', '5,743,219,454', '1.56 %', '85,408,718', '24', '2.88', '39'],
    ['1990', '5,316,175,862', '1.80 %', '90,889,050', '23', '3.31', '36'],
    ['1985', '4,861,730,613', '1.81 %', '83,544,581', '22', '3.52', '33'],
    ['1980', '4,444,007,706', '1.78 %', '74,914,095', '22', '3.75', '30'],
    ['1975', '4,069,437,231', '1.95 %', '74,809,379', '21', '4.08', '27'],
    ['1970', '3,695,390,336', '2.06 %', '71,655,671', '20', '4.83', '25'],
    ['1965', '3,337,111,983', '2.02 %', '63,575,710', '21', '5.08', '22'],
    ['1960', '3,019,233,434', '1.91 %', '54,632,259', '21', '4.70', '20'],
    ['1955', '2,746,072,141', '1.90 %', '49,349,997', '22', '5.01', '18']
], dtype='<U13')

data = {
    'Year': data_array[:, 0],
    'Population': data_array[:, 1],
    'Yearly Change': data_array[:, 2],
    'Net Change': data_array[:, 3],
    'Density': data_array[:, 4],
    'Fertility Rate': data_array[:, 5],
    'Median Age': data_array[:, 6]
}
data

import numpy as np
import networkx as nx
import matplotlib.pyplot as plt


years = data_array[:, 0].astype(int)
densities = data_array[:, 6].astype(float)
median_ages = data_array[:, 4].astype(float)

G = nx.Graph()

for year in years:
    G.add_node(year)

ratio_threshold = 1.2
for i in range(len(years) - 1):
    for j in range(i + 1, len(years)):
        year1 = years[i]
        year2 = years[j]
        density1 = densities[i]
        median_age2 = median_ages[j]
        ratio = density1 / median_age2
        if ratio >= ratio_threshold:
            G.add_edge(year1, year2)

plt.figure(figsize=(10, 8))
pos = nx.spring_layout(G)
nx.draw(G, pos, with_labels=True, node_size=700, node_color='skyblue', font_size=10, font_weight='bold', edge_color='gray')
plt.title('Density to Median Age Ratio Network Graph')
plt.show()

degree_centrality = nx.degree_centrality(G)

betweenness_centrality = nx.betweenness_centrality(G)

key_nodes_degree = sorted(degree_centrality.items())
key_nodes_betweenness = sorted(betweenness_centrality.items())

print("Key nodes based on degree centrality:")
for node, centrality in key_nodes_degree:
    print(f"Year: {node}, Degree Centrality: {centrality:.4f}")

node_size = [1000 * degree_centrality[node] for node in G.nodes()]
node_color = [betweenness_centrality[node] for node in G.nodes()]

fig = plt.figure(figsize=(12, 10))
ax = fig.add_subplot(111, projection='3d')

pos = nx.spring_layout(G, dim=3)
for node in G.nodes():
    x, y, z = pos[node]

for edge in G.edges():
    x = np.array((pos[edge[0]][0], pos[edge[1]][0]))
    y = np.array((pos[edge[0]][1], pos[edge[1]][1]))
    z = np.array((pos[edge[0]][2], pos[edge[1]][2]))
    ax.plot(x, y, z, c='gray')

ax.set_title('3D Mesh Modeling of Density to Median Age Ratio Network Graph')
plt.show()

# adj_matrix = nx.to_numpy_array(G, weight='weight')
# adj_df = pd.DataFrame(adj_matrix, index=years, columns=years)

# plt.figure(figsize=(12, 10))
# sns.heatmap(adj_df, annot=True, cmap='viridis', linewidths=.5)
# plt.title('Heatmap of Density to Median Age Ratio Network Graph')
# plt.xlabel('Year')
# plt.ylabel('Year')
# plt.show()


import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import cv2
import random
import math




xs = [random.randint(400, 506) for l in range(len(G.nodes))]
ys = [random.randint(850, 955) for l in range(len(G.nodes))]

for i in range(len(xs)):
    plt.plot(xs[i], ys[i], "ro")
plt.show()

grid_size = 1
h = 10

x_min = min(xs)
x_max = max(xs)
y_min = min(ys)
y_max = max(ys)

x_grid = np.arange(x_min - h, x_max + h, grid_size)
y_grid = np.arange(y_min - h, y_max + h, grid_size)
x_mesh, y_mesh = np.meshgrid(x_grid, y_grid)

xc = x_mesh + (grid_size / 2)
yc = y_mesh + (grid_size / 2)

def kde_quartic(d, h):
    dn = d / h
    P = (15/16) * (1 - dn**2) * 2
    return P

intensity_list = []
for r in range(len(xc)):
    intensity_row = []
    for c in range(len(xc[0])):
        kde_value_list = []
        for i in range(len(xs)):
            d = math.sqrt((xc[r][c] - xs[i]) ** 2 + (yc[r][c] - ys[i]) ** 2)
            if d <= h:
                p = kde_quartic(d, h)
            else:
                p = 0
            kde_value_list.append(p)
        p_total = sum(kde_value_list)
        intensity_row.append(p_total)
    intensity_list.append(intensity_row)

intensity = np.array(intensity_list)

plt.pcolormesh(x_mesh, y_mesh, intensity)
plt.plot(xs, ys, 'ro')
fig1 = plt.gcf()
plt.axis("off")
plt.show()
plt.draw()

